@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.Authorization

@inject NavigationManager NavigationManager
@inject IAccessTokenProvider AccessTokenProvider
@implements IAsyncDisposable
@attribute [Authorize]

<div class="form-group">
  <label>
    User:
    <input @bind="userInput" />
  </label>
</div>
<div class="form-group">
  <label>
    Message:
    <input @bind="messageInput" size="50" />
  </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
  @foreach (var message in messages)
  {
    <li>@message</li>
  }
</ul>

@code {
  private HubConnection hubConnection;
  private List<string> messages = new List<string>();
  private string userInput;
  private string messageInput;

  protected override async Task OnInitializedAsync()
  {
    hubConnection = new HubConnectionBuilder()
      .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"), options =>
      {
        options.AccessTokenProvider = async () =>
        {
          var accessTokenResult = await AccessTokenProvider.RequestAccessToken();
          accessTokenResult.TryGetToken(out var accessToken);
          return accessToken.Value;
        };
      })
      .Build();

    hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
    {
      var encodedMsg = $"{user}: {message}";
      messages.Add(encodedMsg);
      StateHasChanged();
    });

    await hubConnection.StartAsync();
  }

  async Task Send() =>
    await hubConnection.SendAsync("SendMessage", userInput, messageInput);

  public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

  public async ValueTask DisposeAsync()
  {
    await hubConnection.DisposeAsync();
  }
}