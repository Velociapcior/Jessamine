@inject IState<MessengerState> _state
@inject IDispatcher _dispatcher
@inject IJSRuntime _js
@using Jessamine.Client.State.Messenger.Actions
@using System.ComponentModel.DataAnnotations
@using Jessamine.Shared.Common
@inherits FluxorComponent

<div class="messenger-content">
  <span>@ParticipantName</span>
  <p>@Messages.Count</p>
  @for (int i = 0; i < Messages.Count; i++)
  {
    bool isMessageBlock = false;

    if (i < Messages.Count - 1)
    {
      isMessageBlock = Messages[i].From == Messages[i + 1].From && Messages[i + 1].Date - Messages[i].Date <= TimeSpan.FromMinutes(1);
    }

    <Message IsMessageBlock="@isMessageBlock"
             SentByUser="@(UserName == Messages[i].From)"
             From="@Messages[i].From"
             Content="@Messages[i].Content"
             Date="@Messages[i].Date" 
             Id="@Messages[i].Id"/>
  }
</div>

@if (Messages.LastOrDefault()?.From == UserName)
{
  switch (LastMessageStatus)
  {
    case MessageStatus.NotSet:
      break;
    case MessageStatus.Sent:
      <i class="fas fa-check text-muted"></i>
      break;
    case MessageStatus.Received:
      <i class="fas fa-check-double text-muted"></i>
      break;
    case MessageStatus.Read:
      <i class="fas fa-check-double text-info"></i>
      break;
    default:
      @string.Empty;
      break;
  }
}

<div class="messenger-textbox">
  <div class="input-group">
    <input @oninput="@(OnInputChange)" @onkeyup="@OnKeyPressAsync" value="@MessageInput" type="text" class="form-control" placeholder="Type a message" aria-label="Type a message" aria-describedby="button-addon2">
    <button @onclick="@(() => OnClick.InvokeAsync(MessageInput))" class="btn btn-outline-primary" type="button" id="button-addon2"><i class="far fa-paper-plane"></i></button>
  </div>
</div>

@code {
  [Parameter]
  public string UserName { get; set; }

  [Parameter]
  public string ParticipantName { get; set; }

  [Parameter] public EventCallback<string> OnClick { get; set; }

  [Parameter]
  public MessageStatus LastMessageStatus { get; set; }

  private string MessageInput => _state.Value.Input;

  private List<Jessamine.Shared.Message> Messages => _state.Value.Messages;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (Messages.Count > 0)
    {
      var id = $"message-{Messages.Last().Id}";

      await _js.InvokeVoidAsync("scrollToId", id);

      await base.OnAfterRenderAsync(firstRender);
    }
  }

  private void OnInputChange(ChangeEventArgs args)
  {
    _dispatcher.Dispatch(new ChangeInput((string)args.Value));
  }

  protected override void Dispose(bool disposing)
  {
    _dispatcher.Dispatch(new ClearMessenger());

    base.Dispose(disposing);
  }

  private async Task OnKeyPressAsync(KeyboardEventArgs e)
  {
    if (e.Code == "Enter" || e.Code == "NumpadEnter")
    {
      await OnClick.InvokeAsync(MessageInput);
    }
  }
}
